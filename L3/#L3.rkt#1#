#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2974 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #" "
0 0 14 3 10 #"racket/set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";L3 compiler"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"if-counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"arg-registers"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"ecx"
0 0 24 3 1 #" "
0 0 14 3 3 #"edx"
0 0 24 3 1 #" "
0 0 14 3 3 #"eax"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"L3->L2"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 4 #"call"
0 0 24 3 1 #" "
0 0 14 3 8 #":main123"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #":main123"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"compile-e"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"compile-L3f"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"compile-L3f"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 7 #"arglist"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 7 #"arglist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-naturals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 13 #"arg-registers"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"compile-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define/contract"
0 0 24 3 2 #" ("
0 0 14 3 14 #"list-contains?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"list-contains?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 14 #"list-contains?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 14 #"list-contains?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"compile-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"compile-e-int"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"compile-e-int"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"d"
0 0 24 3 3 #"]) "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"compile-let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"else"
0 0 24 3 3 #") ("
0 0 14 3 10 #"compile-if"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"d-code"
0 0 24 3 2 #" ("
0 0 14 3 9 #"compile-d"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"list-contains?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"tail-call"
0 0 24 3 1 #" "
0 0 14 3 6 #"d-code"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 6 #"d-code"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"d-code"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"return"
0 0 24 3 8 #")))))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"compile-d"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"aref"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"off"
0 0 24 3 3 #") ("
0 0 14 3 4 #"aref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"off"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"aset"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"off"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"new"
0 0 24 3 3 #") ("
0 0 14 3 4 #"aset"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"off"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"alen"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 3 #"<<="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"init"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"allocate"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 3 #"eax"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 9 #"new-tuple"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"vs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 10 #"init-tuple"
0 0 24 3 1 #" "
0 0 14 3 2 #"vs"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";biops"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"compile-add/sub"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"+="
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"compile-add/sub"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"-="
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 12 #"yoloswaggins"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"yoloswaggins"
0 0 24 3 1 #" "
0 0 14 3 3 #">>="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 3 #">>="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"*="
0 0 24 3 1 #" "
0 0 14 3 12 #"yoloswaggins"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"*="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 12 #"compile-comp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 12 #"compile-comp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 12 #"compile-comp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";preds"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 11 #"compile-huh"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"a?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 11 #"compile-huh"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"a?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 12 #"make-closure"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 9 #"compile-d"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 9 #"new-tuple"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 12 #"closure-proc"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 9 #"compile-d"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"aref"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 12 #"closure-vars"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 9 #"compile-d"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"aref"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"fn"
0 0 24 3 3 #") ("
0 0 14 3 12 #"compile-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"tail?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"arglist"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 12 #"compile-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"arglist"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 6 #")))]))"
0 0 17 3 17 #";check for labels"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tmp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"__x_\""
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"compile-add/sub"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tmp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"store-instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 4 #"temp"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"not-op"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"+="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 2 #"-="
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 2 #"+="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"newv1"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"newv2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 4 #"temp"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"newv2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"not-op"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 1 #" "
0 0 14 3 5 #"newv2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 11 #"store-instr"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"newv1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"newv2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"not-op"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"newv1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"newv2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"not-op"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"compile-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"arglist"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" [("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 7 #"arglist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-naturals"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 13 #"arg-registers"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"tail?"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 9 #"tail-call"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"fn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 4 #"call"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"fn"
0 0 24 3 3 #") ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 3 #"eax"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"compile-comp"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 3 #"<<="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"compile-huh"
0 0 24 3 1 #" "
0 0 14 3 3 #"huh"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"&="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"huh"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"a?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"*="
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"*="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"aset"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"pass"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-bounds-label"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pass\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"fail"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-bounds-label"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"fail\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 11 #"bounds-temp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tmp"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 3 #">>="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 11 #"bounds-temp"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"cjump"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 11 #"bounds-temp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"fail"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 28 3 1 #","
0 0 14 3 4 #"fail"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"array-error"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 28 3 1 #","
0 0 14 3 4 #"pass"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"*="
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"aref"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"pass"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-bounds-label"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pass\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"fail"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-bounds-label"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"fail\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 12 #"bounds-count"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 3 #">>="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"bounds-temp"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"cjump"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 11 #"bounds-temp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"fail"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 28 3 1 #","
0 0 14 3 4 #"fail"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"array-error"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"array"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 28 3 1 #","
0 0 14 3 4 #"pass"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"*="
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 23 #")))))                  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"compile-let"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 5 #"dexpr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 5 #"newIC"
0 0 24 3 2 #" ("
0 0 14 3 13 #"compile-e-int"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"instrs"
0 0 24 3 1 #" "
0 0 14 3 5 #"newIC"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"compile-d"
0 0 24 3 1 #" "
0 0 14 3 5 #"dexpr"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 6 #"instrs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"compile-if"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"if-counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 10 #"if-counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"else-lab"
0 0 24 3 2 #" ("
0 0 14 3 12 #"new-if-label"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"then-lab"
0 0 24 3 2 #" ("
0 0 14 3 12 #"new-if-label"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 13 #"compiled-then"
0 0 24 3 2 #" ("
0 0 14 3 13 #"compile-e-int"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 13 #"compiled-else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"compile-e-int"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 5 #"cjump"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"else-lab"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"then-lab"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"then-lab"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 13 #"compiled-then"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"else-lab"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 13 #"compiled-else"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"new-if-label"
0 0 24 3 1 #" "
0 0 14 3 9 #"then/else"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 18 #"\":magic_if_label_\""
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 10 #"if-counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 9 #"then/else"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-bounds-label"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 9 #"pass/fail"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 22 #"\":magic_bounds_label_\""
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 9 #"pass/fail"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"init-tuple"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"allocate"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-naturals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #"))) "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 4 #"dest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 3 #"eax"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define/contract"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"or/c"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(check-equal? (init-tuple '(3 4 5) 'x)"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"              `((eax <- (allocate 7 0))"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"                ((mem eax 4) <- 7)"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"                ((mem eax 8) <- 9)  "
0 0 17 29 1 #"\n"
0 0 17 3 36 #"                ((mem eax 12) <- 11)"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                (x <- eax)))  "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"(check-equal? (compile-e '(let ([x 5]) x))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"              '((x <- 11)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"(check-equal? (compile-e '(let ([x (+ 2 3)]) x))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"              '((x <- 5)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x += 7)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x -= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"(check-equal? (compile-e '(let ([x (- 3 2)]) x))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"              '((x <- 7)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x -= 5)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x += 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"(check-equal? (compile-e '(let ([x (* 10 11)]) x))"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"              '((yoloswaggins <- 21)"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"                (yoloswaggins >>= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x <- 23)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x >>= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                (x *= yoloswaggins)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x *= 2)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x += 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"(check-equal? (compile-e '(let ([x (* 10 11)]) (let ([y 3]) (+ y x))"
 #"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 37 #"              '((yoloswaggins <- 21) "
0 0 17 29 1 #"\n"
0 0 17 3 37 #"                (yoloswaggins >>= 1) "
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x <- 23)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x >>= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                (x *= yoloswaggins)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x *= 2) "
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x += 1) "
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (y <- 7) "
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                (eax <- y) "
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                (eax += x) "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax -= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (return))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              )"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"(check-equal? (compile-e `(let ([x (< 4 5)]) (+ x 3))) "
0 0 17 29 1 #"\n"
0 0 17 3 28 #"              '((x <- 4 < 5)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (x <<= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (x += 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax += 7)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax -= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(check-equal? (compile-e `(a? 3)) "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"              '((eax <- 7)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax &= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                (eax *= -2)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax += 3)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"(check-equal? (compile-e `(number? 3)) "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"              '((eax <- 7)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax &= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax *= 2)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax += 1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(check-equal? (compile-e `(f)) "
0 0 17 29 1 #"\n"
0 0 17 3 31 #"              `((tail-call f)))"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"(check-equal? (compile-e `(f y)) "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"              `((ecx <- y)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"                (tail-call f)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"(check-equal? (compile-e `(let ([x (f y)]) x)) "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"              `((ecx <- y)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (call f)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (x <- eax)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"              "
0 0 17 29 1 #"\n"
0 0 17 3 53 #"(check-equal? (compile-e `(let ([x (f z z1 z2)]) x)) "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"              `((ecx <- z)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                (edx <- z1)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                (eax <- z2)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                (call f)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (x <- eax)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (return)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"(check-equal? (L3->L2 `((let ([x 5]) x)))"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"              '(((call :main123))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (:main123"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                 (x <- 11)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax <- x)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                 (return))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"(check-equal? (L3->L2 `((let ([x 5]) (print x))))"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"              '(((call :main123))"
0 0 17 29 1 #"\n"
0 0 17 3 65
#"               (:main123 (x <- 11) (eax <- (print x)) (return))))"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"(check-equal? (L3->L2 '((let ([x (+ 1 4)]) (print x)))) "
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"              '(((call :main123)) (:main123 (x <- 3) (x += 9) (x -= "
 #"1)"
) 0 0 17 29 1 #"\n"
0 0 17 3 74
(
 #"                                            (eax <- (print x)) (retu"
 #"rn))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 61
#"(check-equal? (L3->L2 '((let ([x (:two_plus_two)]) (print x))"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"                        (:two_plus_two () (+ 2 2)))) "
0 0 17 29 1 #"\n"
0 0 17 3 33 #"              '(((call :main123))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (:main123"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"                 (call :two_plus_two)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (x <- eax)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                 (eax <- (print x))"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                 (return))"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                (:two_plus_two"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax <- 5)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax += 5)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax -= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                 (return))))"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"(check-equal? (L3->L2 '((let ([x (:two_plus_z 3)]) (print x))"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"                        (:two_plus_z (z) (+ z 2)))) "
0 0 17 29 1 #"\n"
0 0 17 3 33 #"              '(((call :main123))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                (:main123"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (ecx <- 7)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                 (call :two_plus_z)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (x <- eax)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                 (eax <- (print x))"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                 (return))"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                (:two_plus_z"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (z <- ecx)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax <- z)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax += 5)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"                 (eax -= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                 (return))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"(check-equal? (L3->L2 '((let ([x (new-array 10 3)])"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"                          (let ([y (aref x 4)])"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"                            (print y))))) '(((call :main123))"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"                                            (:main123"
0 0 17 29 1 #"\n"
0 0 17 3 69
(
 #"                                             (eax <- (allocate 21 7)"
 #")"
) 0 0 17 29 1 #"\n"
0 0 17 3 55 #"                                             (x <- eax)"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"                                             (y <- 9)"
0 0 17 29 1 #"\n"
0 0 17 3 54 #"                                             (y >>= 1)"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"                                             (bounds-temp <- (mem x "
 #"0))"
) 0 0 17 29 1 #"\n"
0 0 17 3 51 #"                                             (cjump"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"                                              y"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"                                              <"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"                                              bounds-temp"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"                                              :magic_bounds_label_0p"
 #"ass"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"                                              :magic_bounds_label_0f"
 #"ail)"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"                                             :magic_bounds_label_0fa"
 #"il"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"                                             (eax <- (array-error x "
 #"9))"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"                                             :magic_bounds_label_0pa"
 #"ss"
) 0 0 17 29 1 #"\n"
0 0 17 3 53 #"                                             (y *= 4)"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"                                             (y += x)"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"                                             (y <- (mem y 4))"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"                                             (eax <- (print y))"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"                                             (return))))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"(check-equal? (L3->L2 '("
0 0 17 29 1 #"\n"
0 0 17 3 25 #"  (let ([result (* 1 0)])"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"    (if result (:truefunc) (:falsefunc))"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  )"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"  (:truefunc () (print 100))"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"  (:falsefunc () (print 200))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 6 #") '())"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"L3->L2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #")) ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 4 #"call"
0 0 24 3 1 #" "
0 0 14 3 8 #":main123"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #":main123"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"x_1"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"-="
0 0 24 3 1 #" "
0 0 14 3 3 #"x_1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"return"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"L3->L2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #")) ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 4 #"call"
0 0 24 3 1 #" "
0 0 14 3 8 #":main123"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #":main123"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"x_1"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"-="
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"+="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"return"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"L3->L2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"x_2"
0 0 24 3 2 #" ("
0 0 14 3 4 #":fib"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #":fib"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"n_1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"x_3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"n_1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_3"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"x_4"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"n_1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"x_5"
0 0 24 3 2 #" ("
0 0 14 3 4 #":fib"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"x_6"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"n_1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"))) ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"x_7"
0 0 24 3 2 #" ("
0 0 14 3 4 #":fib"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_6"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_5"
0 0 24 3 1 #" "
0 0 14 3 3 #"x_7"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"compile-e"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 5 #"cjump"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 21 #":magic_if_label_1else"
0 0 24 3 1 #" "
0 0 14 3 21 #":magic_if_label_1then"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 21 #":magic_if_label_1then"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 21 #":magic_if_label_1else"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"compile-e"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 5 #"cjump"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 21 #":magic_if_label_2else"
0 0 24 3 1 #" "
0 0 14 3 21 #":magic_if_label_2then"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 21 #":magic_if_label_2then"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"cjump"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 21 #":magic_if_label_3else"
0 0 24 3 1 #" "
0 0 14 3 21 #":magic_if_label_3then"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 21 #":magic_if_label_3then"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 21 #":magic_if_label_3else"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 21 #":magic_if_label_2else"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"eax"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";(L3->L2 '((let ((a -1)) (let ((a (+ a 5))) (print a)))))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";(L3->L2 '((let ((a 3)) (let ((a (+ a a))) (print a)))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"L3->L2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-tuple"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"aref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 2 #" ("
0 0 14 3 30 #"current-command-line-arguments"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 20 #"call-with-input-file"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 2 #" ("
0 0 14 3 30 #"current-command-line-arguments"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 6 #"L3->L2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 6 #"L3->L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0           0
