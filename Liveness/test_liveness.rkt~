#lang racket
(require "./liveness.rkt")
(require rackunit)

(struct kill-gen (kills gens))

(define (set-eql? x y)
  (check-equal? (list->set x)
                (list->set y)))

(define (kill-gen-eql? a b)
  ((and (set-eql? (kill-gen-kills a) (kill-gen-kills b))
        (set-eql? (kill-gen-gens a) (kill-gen-gens b)))))

(kill-gen-eql? (kills/gens `(x <- (mem ebp -4)))
          (kill-gen '(x) '(ebp)))

(kill-gen-eql? (kills/gens '((mem ebp -8) <- x))
              (kill-gen '() '(x ebp)))
              
(kill-gen-eql? (kills/gens '((mem ebp -4) <- :label))
              (kill-gen '() '(ebp)))

(kill-gen-eql? (kills/gens '(eax <- (print eax)))
              (kill-gen '(eax esi edi) '(eax ecx edx ebx)))

(kill-gen-eql? (kills/gens '(eax <- (print edx)))
              (kill-gen '(eax esi edi) '(edx ecx edx ebx)))
              
(kill-gen-eql? (kills/gens '(eax <- (print 21)))
              (kill-gen '(eax exc edx ebx) '(esi edi)))

(kill-gen-eql? (kills/gens '(eax <- (allocate x 5)))
              (kill-gen '(eax) '(x)))

(kill-gen-eql? (kills/gens '(eax <- (allocate 1 y)))
              (kill-gen '(eax) '(y)))

(kill-gen-eql? (kills/gens '(eax <- (allocate 54 54)))
              (kill-gen '(eax) empty))


              
                


